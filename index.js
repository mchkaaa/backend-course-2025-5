const { Command } = require('commander');
const http = require('http');
const fs = require('fs');
const path = require('path');

// –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ–≥—Ä–∞–º–∏
const program = new Command();

// –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –Ω–∞—à—É –ø—Ä–æ–≥—Ä–∞–º—É
program
  .name('web-server')
  .description('A simple web server with caching')
  .version('1.0.0');

// –î–æ–¥–∞—î–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
program
  .requiredOption('-h, --host <host>', 'Server host address (required)')
  .requiredOption('-p, --port <port>', 'Server port (required)')
  .requiredOption('-c, --cache <path>', 'Path to cache directory (required)');

// –ü–∞—Ä—Å–∏–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
program.parse();

// –û—Ç—Ä–∏–º—É—î–º–æ –æ–ø—Ü—ñ—ó
const options = program.opts();

// –ö—Ä–æ–∫ 2: –°—Ç–≤–æ—Ä—é—î–º–æ cache –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
const cachePath = path.resolve(options.cache);

try {
  if (!fs.existsSync(cachePath)) {
    fs.mkdirSync(cachePath, { recursive: true });
    console.log(`‚úÖ Cache directory created: ${cachePath}`);
  } else {
    console.log(`üìÅ Cache directory already exists: ${cachePath}`);
  }
} catch (error) {
  console.error(`‚ùå Error creating cache directory: ${error.message}`);
  process.exit(1);
}

// –ö—Ä–æ–∫ 3: –°—Ç–≤–æ—Ä—é—î–º–æ HTTP —Å–µ—Ä–≤–µ—Ä
const server = http.createServer((req, res) => {
  // –ü—Ä–æ—Å—Ç–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end(`Hello from server! Host: ${options.host}, Port: ${options.port}, Cache: ${cachePath}\n`);
});

// –ö—Ä–æ–∫ 4: –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä
server.listen(options.port, options.host, () => {
  console.log(`üöÄ Server is running on http://${options.host}:${options.port}`);
  console.log(`üíæ Cache directory: ${cachePath}`);
});

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.on('error', (error) => {
  console.error(`‚ùå Server error: ${error.message}`);
});

// –û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è (Ctrl+C)
process.on('SIGINT', () => {
  console.log('\nüõë Shutting down server...');
  server.close(() => {
    console.log('‚úÖ Server stopped');
    process.exit(0);
  });
});